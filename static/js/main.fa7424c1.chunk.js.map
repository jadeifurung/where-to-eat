{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","sortByOptions","handleTermChange","bind","handleLocationChange","handleSearch","handleKeyPress","sortByOption","setState","searchYelp","e","target","value","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","onChange","onKeyPress","placeholder","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","categoryArr","categories","forEach","push","title","image_url","display_address","zip_code","join","review_count","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fa7424c1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\nclass Business extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Business\">\r\n                <div className=\"image-container\">\r\n                    <img src={this.props.business.imageSrc} alt='' />\r\n                </div>\r\n                <h2>{this.props.business.name}</h2>\r\n                <div className=\"Business-information\">\r\n                    <div className=\"Business-address\">\r\n                        <p>{this.props.business.address}</p>\r\n                        <p>{this.props.business.city}</p>\r\n                        <p>{this.props.business.state} {this.props.business.zipCode}</p>\r\n                    </div>\r\n                    <div className=\"Business-reviews\">\r\n                        <h3>{this.props.business.category}</h3>\r\n                        <h3 className=\"rating\">{this.props.business.rating} stars</h3>\r\n                        <p>{this.props.business.reviewCount} reviews</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"BusinessList\">\r\n                {\r\n                    this.props.businesses.map(business => {\r\n                        return <Business key={business.id} business={business} />;\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BusinessList;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: '',\r\n            location: 'Marikina, PH',\r\n            sortBy:'best_match'\r\n        };\r\n\r\n        this.sortByOptions = {\r\n            \"Best Match\": \"best_match\",\r\n            \"Highest Rated\": \"rating\",\r\n            \"Most Reviewed\": \"review_count\"\r\n        };\r\n\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleLocationChange = this.handleLocationChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n    }\r\n\r\n    getSortByClass(sortByOption) {\r\n        return this.state.sortBy === sortByOption ? 'active' : '';\r\n    }\r\n\r\n\r\n    handleSortByChange(sortByOption) {\r\n        this.setState({\r\n           sortBy: sortByOption \r\n        });\r\n\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n    }\r\n\r\n    handleTermChange(e) {\r\n        this.setState({\r\n            term: e.target.value\r\n        });\r\n    }\r\n\r\n    handleLocationChange(e) {\r\n        this.setState({\r\n            location: e.target.value\r\n        });\r\n    }\r\n\r\n    handleSearch(e) {\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n        e.preventDefault();\r\n    }\r\n\r\n    handleKeyPress(e) {\r\n        if (e.key === 'Enter') {\r\n            this.handleSearch(e);\r\n        }\r\n    }\r\n\r\n    renderSortByOptions() {\r\n        return Object.keys(this.sortByOptions).map(sortByOption => {\r\n            let sortByOptionValue = this.sortByOptions[sortByOption];\r\n            return <li className={this.getSortByClass(sortByOptionValue)} \r\n                        key={sortByOptionValue}\r\n                        onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>\r\n                        {sortByOption}\r\n                    </li>\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <div className=\"SearchBar-sort-options\">\r\n                    <ul>\r\n                        {this.renderSortByOptions()}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"SearchBar-fields\">\r\n                    <input onChange={this.handleTermChange} onKeyPress={this.handleKeyPress}\r\n                        placeholder=\"Search Businesses\" />\r\n                    <input onChange={this.handleLocationChange} onKeyPress={this.handleKeyPress} \r\n                        placeholder=\"Where?\" value={this.state.location} />\r\n                </div>\r\n                <div className=\"SearchBar-submit\">\r\n                    <a onClick={this.handleSearch}>Let's Go</a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","const apiKey = 'YVLuJPKk1la2pzEjft5QKao8_hbkNBsKyUOWwf4Yc94M19gEtcHLnoXhrym_' +\r\n    'lLgDXOcenMhfDAaXHb7THinNuZK6PJyI6tjhx6NLQPnAvWv82q339SZ4cWooeYvHXXYx';\r\n\r\nconst Yelp = {\r\n    search: function(term, location, sortBy) {\r\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?` +\r\n            `term=${term}&location=${location}&sort_by=${sortBy}`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${apiKey}`\r\n                }\r\n            })\r\n            .then(response => {\r\n                return response.json();\r\n            })\r\n            .then(jsonResponse => {\r\n                if (jsonResponse.businesses) {\r\n                    return jsonResponse.businesses.map(business => {\r\n                        let categoryArr = [];\r\n\r\n                        business.categories.forEach(category => {\r\n                            categoryArr.push(category.title);\r\n                        });\r\n\r\n                        return {     \r\n                            id: business.id,\r\n                            imageSrc: business.image_url,\r\n                            name: business.name,\r\n                            address: business.location.display_address,\r\n                            city: business.location.city,\r\n                            state: business.location.state,\r\n                            zipCode: business.location.zip_code,\r\n                            category: categoryArr.join(', '),\r\n                            rating: business.rating,\r\n                            reviewCount: business.review_count\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n    }\r\n};\r\n\r\nexport default Yelp;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport BusinessList from '../BusinessList/BusinessList';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport Yelp from '../../util/Yelp';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      businesses: []\r\n    };\r\n\r\n    this.searchYelp = this.searchYelp.bind(this);\r\n  }\r\n\r\n  searchYelp(term, location, sortBy) {\r\n    Yelp.search(term, location, sortBy)\r\n      .then(businesses => {\r\n        this.setState({\r\n          businesses: businesses\r\n        })\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>WhereToEat</h1>\r\n        <SearchBar searchYelp={this.searchYelp} />\r\n        <BusinessList businesses={this.state.businesses} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}